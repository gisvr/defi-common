// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tradeevent.proto

package dex2

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TradeEvent struct {
	// Consecutive. The first event has index 1.
	EventIndex int64 `protobuf:"varint,1,opt,name=event_index,json=eventIndex,proto3" json:"event_index,omitempty"`
	// the index of the commit for which this event was emitted
	CommitIndex int64 `protobuf:"varint,2,opt,name=commit_index,json=commitIndex,proto3" json:"commit_index,omitempty"`
	LogicTimeMs int64 `protobuf:"varint,3,opt,name=logic_time_ms,json=logicTimeMs,proto3" json:"logic_time_ms,omitempty"`
	// Must sync up body cases with boilerplates:
	// - github.com/dexDev/dex2/proto/pbu/tradeevent.go
	//
	// Types that are valid to be assigned to Body:
	//	*TradeEvent_SetFeeRates
	//	*TradeEvent_AddDeposit
	//	*TradeEvent_InitiateWithdraw
	//	*TradeEvent_PlaceOrder
	//	*TradeEvent_CancelOrder
	//	*TradeEvent_MatchOrders
	//	*TradeEvent_ExpiredOrders
	Body                 isTradeEvent_Body `protobuf_oneof:"body"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TradeEvent) Reset()         { *m = TradeEvent{} }
func (m *TradeEvent) String() string { return proto.CompactTextString(m) }
func (*TradeEvent) ProtoMessage()    {}
func (*TradeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c894782e656afd33, []int{0}
}

func (m *TradeEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeEvent.Unmarshal(m, b)
}
func (m *TradeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeEvent.Marshal(b, m, deterministic)
}
func (m *TradeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeEvent.Merge(m, src)
}
func (m *TradeEvent) XXX_Size() int {
	return xxx_messageInfo_TradeEvent.Size(m)
}
func (m *TradeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TradeEvent proto.InternalMessageInfo

func (m *TradeEvent) GetEventIndex() int64 {
	if m != nil {
		return m.EventIndex
	}
	return 0
}

func (m *TradeEvent) GetCommitIndex() int64 {
	if m != nil {
		return m.CommitIndex
	}
	return 0
}

func (m *TradeEvent) GetLogicTimeMs() int64 {
	if m != nil {
		return m.LogicTimeMs
	}
	return 0
}

type isTradeEvent_Body interface {
	isTradeEvent_Body()
}

type TradeEvent_SetFeeRates struct {
	SetFeeRates *SetFeeRatesEvent `protobuf:"bytes,4,opt,name=set_fee_rates,json=setFeeRates,proto3,oneof"`
}

type TradeEvent_AddDeposit struct {
	AddDeposit *AddDepositEvent `protobuf:"bytes,5,opt,name=add_deposit,json=addDeposit,proto3,oneof"`
}

type TradeEvent_InitiateWithdraw struct {
	InitiateWithdraw *InitiateWithdrawEvent `protobuf:"bytes,6,opt,name=initiate_withdraw,json=initiateWithdraw,proto3,oneof"`
}

type TradeEvent_PlaceOrder struct {
	PlaceOrder *PlaceOrderEvent `protobuf:"bytes,7,opt,name=place_order,json=placeOrder,proto3,oneof"`
}

type TradeEvent_CancelOrder struct {
	CancelOrder *CancelOrderEvent `protobuf:"bytes,8,opt,name=cancel_order,json=cancelOrder,proto3,oneof"`
}

type TradeEvent_MatchOrders struct {
	MatchOrders *MatchOrdersEvent `protobuf:"bytes,9,opt,name=match_orders,json=matchOrders,proto3,oneof"`
}

type TradeEvent_ExpiredOrders struct {
	ExpiredOrders *ExpiredOrdersEvent `protobuf:"bytes,10,opt,name=expired_orders,json=expiredOrders,proto3,oneof"`
}

func (*TradeEvent_SetFeeRates) isTradeEvent_Body() {}

func (*TradeEvent_AddDeposit) isTradeEvent_Body() {}

func (*TradeEvent_InitiateWithdraw) isTradeEvent_Body() {}

func (*TradeEvent_PlaceOrder) isTradeEvent_Body() {}

func (*TradeEvent_CancelOrder) isTradeEvent_Body() {}

func (*TradeEvent_MatchOrders) isTradeEvent_Body() {}

func (*TradeEvent_ExpiredOrders) isTradeEvent_Body() {}

func (m *TradeEvent) GetBody() isTradeEvent_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *TradeEvent) GetSetFeeRates() *SetFeeRatesEvent {
	if x, ok := m.GetBody().(*TradeEvent_SetFeeRates); ok {
		return x.SetFeeRates
	}
	return nil
}

func (m *TradeEvent) GetAddDeposit() *AddDepositEvent {
	if x, ok := m.GetBody().(*TradeEvent_AddDeposit); ok {
		return x.AddDeposit
	}
	return nil
}

func (m *TradeEvent) GetInitiateWithdraw() *InitiateWithdrawEvent {
	if x, ok := m.GetBody().(*TradeEvent_InitiateWithdraw); ok {
		return x.InitiateWithdraw
	}
	return nil
}

func (m *TradeEvent) GetPlaceOrder() *PlaceOrderEvent {
	if x, ok := m.GetBody().(*TradeEvent_PlaceOrder); ok {
		return x.PlaceOrder
	}
	return nil
}

func (m *TradeEvent) GetCancelOrder() *CancelOrderEvent {
	if x, ok := m.GetBody().(*TradeEvent_CancelOrder); ok {
		return x.CancelOrder
	}
	return nil
}

func (m *TradeEvent) GetMatchOrders() *MatchOrdersEvent {
	if x, ok := m.GetBody().(*TradeEvent_MatchOrders); ok {
		return x.MatchOrders
	}
	return nil
}

func (m *TradeEvent) GetExpiredOrders() *ExpiredOrdersEvent {
	if x, ok := m.GetBody().(*TradeEvent_ExpiredOrders); ok {
		return x.ExpiredOrders
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TradeEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TradeEvent_SetFeeRates)(nil),
		(*TradeEvent_AddDeposit)(nil),
		(*TradeEvent_InitiateWithdraw)(nil),
		(*TradeEvent_PlaceOrder)(nil),
		(*TradeEvent_CancelOrder)(nil),
		(*TradeEvent_MatchOrders)(nil),
		(*TradeEvent_ExpiredOrders)(nil),
	}
}

type SetFeeRatesEvent struct {
	MakerFeeRateE4       uint64   `protobuf:"varint,1,opt,name=maker_fee_rate_e4,json=makerFeeRateE4,proto3" json:"maker_fee_rate_e4,omitempty"`
	TakerFeeRateE4       uint64   `protobuf:"varint,2,opt,name=taker_fee_rate_e4,json=takerFeeRateE4,proto3" json:"taker_fee_rate_e4,omitempty"`
	WithdrawFeeRateE4    uint64   `protobuf:"varint,3,opt,name=withdraw_fee_rate_e4,json=withdrawFeeRateE4,proto3" json:"withdraw_fee_rate_e4,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetFeeRatesEvent) Reset()         { *m = SetFeeRatesEvent{} }
func (m *SetFeeRatesEvent) String() string { return proto.CompactTextString(m) }
func (*SetFeeRatesEvent) ProtoMessage()    {}
func (*SetFeeRatesEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c894782e656afd33, []int{1}
}

func (m *SetFeeRatesEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetFeeRatesEvent.Unmarshal(m, b)
}
func (m *SetFeeRatesEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetFeeRatesEvent.Marshal(b, m, deterministic)
}
func (m *SetFeeRatesEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetFeeRatesEvent.Merge(m, src)
}
func (m *SetFeeRatesEvent) XXX_Size() int {
	return xxx_messageInfo_SetFeeRatesEvent.Size(m)
}
func (m *SetFeeRatesEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SetFeeRatesEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SetFeeRatesEvent proto.InternalMessageInfo

func (m *SetFeeRatesEvent) GetMakerFeeRateE4() uint64 {
	if m != nil {
		return m.MakerFeeRateE4
	}
	return 0
}

func (m *SetFeeRatesEvent) GetTakerFeeRateE4() uint64 {
	if m != nil {
		return m.TakerFeeRateE4
	}
	return 0
}

func (m *SetFeeRatesEvent) GetWithdrawFeeRateE4() uint64 {
	if m != nil {
		return m.WithdrawFeeRateE4
	}
	return 0
}

type AddDepositEvent struct {
	MarketAddr string `protobuf:"bytes,1,opt,name=market_addr,json=marketAddr,proto3" json:"market_addr,omitempty"`
	TraderAddr string `protobuf:"bytes,2,opt,name=trader_addr,json=traderAddr,proto3" json:"trader_addr,omitempty"`
	// The token id of the deposit
	TokenId string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// The token code of the deposit
	TokenCode uint32 `protobuf:"varint,4,opt,name=token_code,json=tokenCode,proto3" json:"token_code,omitempty"`
	// The deposit amount
	AmountE8 uint64 `protobuf:"varint,5,opt,name=amount_e8,json=amountE8,proto3" json:"amount_e8,omitempty"`
	// The new token balance after the deposit.
	NewBalance *TokenBalance `protobuf:"bytes,6,opt,name=new_balance,json=newBalance,proto3" json:"new_balance,omitempty"`
	// The index of deposit in the smart contract storage.
	DepositIndex         int64    `protobuf:"varint,7,opt,name=depositIndex,proto3" json:"depositIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddDepositEvent) Reset()         { *m = AddDepositEvent{} }
func (m *AddDepositEvent) String() string { return proto.CompactTextString(m) }
func (*AddDepositEvent) ProtoMessage()    {}
func (*AddDepositEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c894782e656afd33, []int{2}
}

func (m *AddDepositEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddDepositEvent.Unmarshal(m, b)
}
func (m *AddDepositEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddDepositEvent.Marshal(b, m, deterministic)
}
func (m *AddDepositEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDepositEvent.Merge(m, src)
}
func (m *AddDepositEvent) XXX_Size() int {
	return xxx_messageInfo_AddDepositEvent.Size(m)
}
func (m *AddDepositEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDepositEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AddDepositEvent proto.InternalMessageInfo

func (m *AddDepositEvent) GetMarketAddr() string {
	if m != nil {
		return m.MarketAddr
	}
	return ""
}

func (m *AddDepositEvent) GetTraderAddr() string {
	if m != nil {
		return m.TraderAddr
	}
	return ""
}

func (m *AddDepositEvent) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *AddDepositEvent) GetTokenCode() uint32 {
	if m != nil {
		return m.TokenCode
	}
	return 0
}

func (m *AddDepositEvent) GetAmountE8() uint64 {
	if m != nil {
		return m.AmountE8
	}
	return 0
}

func (m *AddDepositEvent) GetNewBalance() *TokenBalance {
	if m != nil {
		return m.NewBalance
	}
	return nil
}

func (m *AddDepositEvent) GetDepositIndex() int64 {
	if m != nil {
		return m.DepositIndex
	}
	return 0
}

// Event - initiates a withdraw.
type InitiateWithdrawEvent struct {
	MarketAddr string `protobuf:"bytes,1,opt,name=market_addr,json=marketAddr,proto3" json:"market_addr,omitempty"`
	TraderAddr string `protobuf:"bytes,2,opt,name=trader_addr,json=traderAddr,proto3" json:"trader_addr,omitempty"`
	// The token id of the withdraw
	TokenId string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// The token code of the withdraw
	TokenCode uint32 `protobuf:"varint,4,opt,name=token_code,json=tokenCode,proto3" json:"token_code,omitempty"`
	// The withdraw amount
	AmountE8 uint64 `protobuf:"varint,5,opt,name=amount_e8,json=amountE8,proto3" json:"amount_e8,omitempty"`
	// The withdraw fee
	WithdrawFeeE8 uint64 `protobuf:"varint,6,opt,name=withdraw_fee_e8,json=withdrawFeeE8,proto3" json:"withdraw_fee_e8,omitempty"`
	// The new token balance after the event.
	NewBalance           *TokenBalance `protobuf:"bytes,7,opt,name=new_balance,json=newBalance,proto3" json:"new_balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *InitiateWithdrawEvent) Reset()         { *m = InitiateWithdrawEvent{} }
func (m *InitiateWithdrawEvent) String() string { return proto.CompactTextString(m) }
func (*InitiateWithdrawEvent) ProtoMessage()    {}
func (*InitiateWithdrawEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c894782e656afd33, []int{3}
}

func (m *InitiateWithdrawEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitiateWithdrawEvent.Unmarshal(m, b)
}
func (m *InitiateWithdrawEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitiateWithdrawEvent.Marshal(b, m, deterministic)
}
func (m *InitiateWithdrawEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitiateWithdrawEvent.Merge(m, src)
}
func (m *InitiateWithdrawEvent) XXX_Size() int {
	return xxx_messageInfo_InitiateWithdrawEvent.Size(m)
}
func (m *InitiateWithdrawEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_InitiateWithdrawEvent.DiscardUnknown(m)
}

var xxx_messageInfo_InitiateWithdrawEvent proto.InternalMessageInfo

func (m *InitiateWithdrawEvent) GetMarketAddr() string {
	if m != nil {
		return m.MarketAddr
	}
	return ""
}

func (m *InitiateWithdrawEvent) GetTraderAddr() string {
	if m != nil {
		return m.TraderAddr
	}
	return ""
}

func (m *InitiateWithdrawEvent) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *InitiateWithdrawEvent) GetTokenCode() uint32 {
	if m != nil {
		return m.TokenCode
	}
	return 0
}

func (m *InitiateWithdrawEvent) GetAmountE8() uint64 {
	if m != nil {
		return m.AmountE8
	}
	return 0
}

func (m *InitiateWithdrawEvent) GetWithdrawFeeE8() uint64 {
	if m != nil {
		return m.WithdrawFeeE8
	}
	return 0
}

func (m *InitiateWithdrawEvent) GetNewBalance() *TokenBalance {
	if m != nil {
		return m.NewBalance
	}
	return nil
}

type PlaceOrderEvent struct {
	MarketAddr string `protobuf:"bytes,1,opt,name=market_addr,json=marketAddr,proto3" json:"market_addr,omitempty"`
	// The place order - before any matching.
	Order *Order `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	// For a buy  order, this is the new balance of the cash  token after placing the order;
	// For a sell order, this is the new balance of the stock token after placing the order.
	NewBalance           *TokenBalance `protobuf:"bytes,3,opt,name=new_balance,json=newBalance,proto3" json:"new_balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PlaceOrderEvent) Reset()         { *m = PlaceOrderEvent{} }
func (m *PlaceOrderEvent) String() string { return proto.CompactTextString(m) }
func (*PlaceOrderEvent) ProtoMessage()    {}
func (*PlaceOrderEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c894782e656afd33, []int{4}
}

func (m *PlaceOrderEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaceOrderEvent.Unmarshal(m, b)
}
func (m *PlaceOrderEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaceOrderEvent.Marshal(b, m, deterministic)
}
func (m *PlaceOrderEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceOrderEvent.Merge(m, src)
}
func (m *PlaceOrderEvent) XXX_Size() int {
	return xxx_messageInfo_PlaceOrderEvent.Size(m)
}
func (m *PlaceOrderEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceOrderEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceOrderEvent proto.InternalMessageInfo

func (m *PlaceOrderEvent) GetMarketAddr() string {
	if m != nil {
		return m.MarketAddr
	}
	return ""
}

func (m *PlaceOrderEvent) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *PlaceOrderEvent) GetNewBalance() *TokenBalance {
	if m != nil {
		return m.NewBalance
	}
	return nil
}

// This is the "soft-cancel", i.e. the order cancelled in the trader server WITHOUT marking it
// on the blockchain.
type CancelOrderEvent struct {
	MarketAddr string `protobuf:"bytes,1,opt,name=market_addr,json=marketAddr,proto3" json:"market_addr,omitempty"`
	// The cancelled order. Its status is either Cancelled or PartiallyCancelled.
	Order *Order `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	// For a buy  order, this is the new balance of the cash  token after cancelling the order;
	// For a sell order, this is the new balance of the stock token after cancelling the order.
	NewBalance           *TokenBalance `protobuf:"bytes,3,opt,name=new_balance,json=newBalance,proto3" json:"new_balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CancelOrderEvent) Reset()         { *m = CancelOrderEvent{} }
func (m *CancelOrderEvent) String() string { return proto.CompactTextString(m) }
func (*CancelOrderEvent) ProtoMessage()    {}
func (*CancelOrderEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c894782e656afd33, []int{5}
}

func (m *CancelOrderEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelOrderEvent.Unmarshal(m, b)
}
func (m *CancelOrderEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelOrderEvent.Marshal(b, m, deterministic)
}
func (m *CancelOrderEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelOrderEvent.Merge(m, src)
}
func (m *CancelOrderEvent) XXX_Size() int {
	return xxx_messageInfo_CancelOrderEvent.Size(m)
}
func (m *CancelOrderEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelOrderEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CancelOrderEvent proto.InternalMessageInfo

func (m *CancelOrderEvent) GetMarketAddr() string {
	if m != nil {
		return m.MarketAddr
	}
	return ""
}

func (m *CancelOrderEvent) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *CancelOrderEvent) GetNewBalance() *TokenBalance {
	if m != nil {
		return m.NewBalance
	}
	return nil
}

type MatchOrdersEvent struct {
	MarketAddr string `protobuf:"bytes,1,opt,name=market_addr,json=marketAddr,proto3" json:"market_addr,omitempty"`
	PairCode   uint32 `protobuf:"varint,2,opt,name=pair_code,json=pairCode,proto3" json:"pair_code,omitempty"`
	// the execution price
	ExePriceE8 uint64 `protobuf:"varint,3,opt,name=exe_price_e8,json=exePriceE8,proto3" json:"exe_price_e8,omitempty"`
	// the stock amount executed in this matching
	ExeAmountE8 uint64 `protobuf:"varint,4,opt,name=exe_amount_e8,json=exeAmountE8,proto3" json:"exe_amount_e8,omitempty"`
	// the maker fee in this matching
	MakerFeeE8 uint64 `protobuf:"varint,5,opt,name=maker_fee_e8,json=makerFeeE8,proto3" json:"maker_fee_e8,omitempty"`
	// the taker fee in this matching
	TakerFeeE8 uint64 `protobuf:"varint,6,opt,name=taker_fee_e8,json=takerFeeE8,proto3" json:"taker_fee_e8,omitempty"`
	// Whether the maker order was unfilled before this matching.
	WasMakerOrderUnfilled bool `protobuf:"varint,7,opt,name=was_maker_order_unfilled,json=wasMakerOrderUnfilled,proto3" json:"was_maker_order_unfilled,omitempty"`
	// Whether the take order was unfilled before this matching.
	WasTakerOrderUnfilled bool `protobuf:"varint,8,opt,name=was_taker_order_unfilled,json=wasTakerOrderUnfilled,proto3" json:"was_taker_order_unfilled,omitempty"`
	// the updated maker order
	NewMakerOrder *Order `protobuf:"bytes,9,opt,name=new_maker_order,json=newMakerOrder,proto3" json:"new_maker_order,omitempty"`
	// the updated take order
	NewTakerOrder        *Order        `protobuf:"bytes,10,opt,name=new_taker_order,json=newTakerOrder,proto3" json:"new_taker_order,omitempty"`
	NewMakerCashBalance  *TokenBalance `protobuf:"bytes,11,opt,name=new_maker_cash_balance,json=newMakerCashBalance,proto3" json:"new_maker_cash_balance,omitempty"`
	NewMakerStockBalance *TokenBalance `protobuf:"bytes,12,opt,name=new_maker_stock_balance,json=newMakerStockBalance,proto3" json:"new_maker_stock_balance,omitempty"`
	NewTakerCashBalance  *TokenBalance `protobuf:"bytes,13,opt,name=new_taker_cash_balance,json=newTakerCashBalance,proto3" json:"new_taker_cash_balance,omitempty"`
	NewTakerStockBalance *TokenBalance `protobuf:"bytes,14,opt,name=new_taker_stock_balance,json=newTakerStockBalance,proto3" json:"new_taker_stock_balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MatchOrdersEvent) Reset()         { *m = MatchOrdersEvent{} }
func (m *MatchOrdersEvent) String() string { return proto.CompactTextString(m) }
func (*MatchOrdersEvent) ProtoMessage()    {}
func (*MatchOrdersEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c894782e656afd33, []int{6}
}

func (m *MatchOrdersEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchOrdersEvent.Unmarshal(m, b)
}
func (m *MatchOrdersEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchOrdersEvent.Marshal(b, m, deterministic)
}
func (m *MatchOrdersEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchOrdersEvent.Merge(m, src)
}
func (m *MatchOrdersEvent) XXX_Size() int {
	return xxx_messageInfo_MatchOrdersEvent.Size(m)
}
func (m *MatchOrdersEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchOrdersEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MatchOrdersEvent proto.InternalMessageInfo

func (m *MatchOrdersEvent) GetMarketAddr() string {
	if m != nil {
		return m.MarketAddr
	}
	return ""
}

func (m *MatchOrdersEvent) GetPairCode() uint32 {
	if m != nil {
		return m.PairCode
	}
	return 0
}

func (m *MatchOrdersEvent) GetExePriceE8() uint64 {
	if m != nil {
		return m.ExePriceE8
	}
	return 0
}

func (m *MatchOrdersEvent) GetExeAmountE8() uint64 {
	if m != nil {
		return m.ExeAmountE8
	}
	return 0
}

func (m *MatchOrdersEvent) GetMakerFeeE8() uint64 {
	if m != nil {
		return m.MakerFeeE8
	}
	return 0
}

func (m *MatchOrdersEvent) GetTakerFeeE8() uint64 {
	if m != nil {
		return m.TakerFeeE8
	}
	return 0
}

func (m *MatchOrdersEvent) GetWasMakerOrderUnfilled() bool {
	if m != nil {
		return m.WasMakerOrderUnfilled
	}
	return false
}

func (m *MatchOrdersEvent) GetWasTakerOrderUnfilled() bool {
	if m != nil {
		return m.WasTakerOrderUnfilled
	}
	return false
}

func (m *MatchOrdersEvent) GetNewMakerOrder() *Order {
	if m != nil {
		return m.NewMakerOrder
	}
	return nil
}

func (m *MatchOrdersEvent) GetNewTakerOrder() *Order {
	if m != nil {
		return m.NewTakerOrder
	}
	return nil
}

func (m *MatchOrdersEvent) GetNewMakerCashBalance() *TokenBalance {
	if m != nil {
		return m.NewMakerCashBalance
	}
	return nil
}

func (m *MatchOrdersEvent) GetNewMakerStockBalance() *TokenBalance {
	if m != nil {
		return m.NewMakerStockBalance
	}
	return nil
}

func (m *MatchOrdersEvent) GetNewTakerCashBalance() *TokenBalance {
	if m != nil {
		return m.NewTakerCashBalance
	}
	return nil
}

func (m *MatchOrdersEvent) GetNewTakerStockBalance() *TokenBalance {
	if m != nil {
		return m.NewTakerStockBalance
	}
	return nil
}

type ExpiredOrdersEvent struct {
	MarketAddr   string `protobuf:"bytes,1,opt,name=market_addr,json=marketAddr,proto3" json:"market_addr,omitempty"`
	LogicTimeSec int64  `protobuf:"varint,2,opt,name=logic_time_sec,json=logicTimeSec,proto3" json:"logic_time_sec,omitempty"`
	// `trader_addrs` and `new_balances` are equal in length. `trader_addrs[i]` is the trader address
	// of `new_balances[i]`.
	TraderAddrs          []string        `protobuf:"bytes,3,rep,name=trader_addrs,json=traderAddrs,proto3" json:"trader_addrs,omitempty"`
	NewBalances          []*TokenBalance `protobuf:"bytes,4,rep,name=new_balances,json=newBalances,proto3" json:"new_balances,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ExpiredOrdersEvent) Reset()         { *m = ExpiredOrdersEvent{} }
func (m *ExpiredOrdersEvent) String() string { return proto.CompactTextString(m) }
func (*ExpiredOrdersEvent) ProtoMessage()    {}
func (*ExpiredOrdersEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c894782e656afd33, []int{7}
}

func (m *ExpiredOrdersEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpiredOrdersEvent.Unmarshal(m, b)
}
func (m *ExpiredOrdersEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpiredOrdersEvent.Marshal(b, m, deterministic)
}
func (m *ExpiredOrdersEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpiredOrdersEvent.Merge(m, src)
}
func (m *ExpiredOrdersEvent) XXX_Size() int {
	return xxx_messageInfo_ExpiredOrdersEvent.Size(m)
}
func (m *ExpiredOrdersEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpiredOrdersEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ExpiredOrdersEvent proto.InternalMessageInfo

func (m *ExpiredOrdersEvent) GetMarketAddr() string {
	if m != nil {
		return m.MarketAddr
	}
	return ""
}

func (m *ExpiredOrdersEvent) GetLogicTimeSec() int64 {
	if m != nil {
		return m.LogicTimeSec
	}
	return 0
}

func (m *ExpiredOrdersEvent) GetTraderAddrs() []string {
	if m != nil {
		return m.TraderAddrs
	}
	return nil
}

func (m *ExpiredOrdersEvent) GetNewBalances() []*TokenBalance {
	if m != nil {
		return m.NewBalances
	}
	return nil
}

func init() {
	proto.RegisterType((*TradeEvent)(nil), "dex.TradeEvent")
	proto.RegisterType((*SetFeeRatesEvent)(nil), "dex.SetFeeRatesEvent")
	proto.RegisterType((*AddDepositEvent)(nil), "dex.AddDepositEvent")
	proto.RegisterType((*InitiateWithdrawEvent)(nil), "dex.InitiateWithdrawEvent")
	proto.RegisterType((*PlaceOrderEvent)(nil), "dex.PlaceOrderEvent")
	proto.RegisterType((*CancelOrderEvent)(nil), "dex.CancelOrderEvent")
	proto.RegisterType((*MatchOrdersEvent)(nil), "dex.MatchOrdersEvent")
	proto.RegisterType((*ExpiredOrdersEvent)(nil), "dex.ExpiredOrdersEvent")
}

func init() { proto.RegisterFile("tradeevent.proto", fileDescriptor_c894782e656afd33) }

var fileDescriptor_c894782e656afd33 = []byte{
	// 915 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xc6, 0x3f, 0x49, 0xec, 0x1a, 0x3b, 0xb1, 0x87, 0x84, 0x35, 0xbb, 0x42, 0x18, 0x0b, 0xa1,
	0x80, 0x90, 0x23, 0x85, 0x48, 0x1b, 0xc1, 0x85, 0x24, 0x78, 0xb5, 0x39, 0x44, 0xac, 0x26, 0x46,
	0x48, 0x5c, 0x46, 0xed, 0xe9, 0xda, 0xa4, 0x15, 0xcf, 0xf4, 0x68, 0xba, 0x17, 0x0f, 0x57, 0x4e,
	0x20, 0xf1, 0x02, 0xbc, 0x05, 0x07, 0x1e, 0x86, 0xc7, 0x41, 0x5d, 0x3d, 0x7f, 0x1e, 0x27, 0x9b,
	0xbd, 0xc1, 0xcd, 0xfe, 0xea, 0xfb, 0xaa, 0x3e, 0x77, 0x55, 0x97, 0x1b, 0x06, 0x3a, 0x61, 0x1c,
	0xf1, 0x67, 0x8c, 0xf4, 0x34, 0x4e, 0xa4, 0x96, 0x6e, 0x8b, 0x63, 0xfa, 0x74, 0xb8, 0x44, 0x7e,
	0x83, 0x89, 0xd2, 0x4c, 0xa3, 0xc5, 0x27, 0x7f, 0xb5, 0x01, 0xe6, 0x86, 0x3c, 0x33, 0x64, 0xf7,
	0x63, 0x70, 0x48, 0xe5, 0x8b, 0x88, 0x63, 0x3a, 0x6a, 0x8c, 0x1b, 0x87, 0x2d, 0x0f, 0x08, 0xba,
	0x34, 0x88, 0xfb, 0x09, 0xf4, 0x02, 0x19, 0x86, 0x22, 0x67, 0x34, 0x89, 0xe1, 0x58, 0xcc, 0x52,
	0x26, 0xd0, 0x5f, 0xca, 0x1b, 0x11, 0xf8, 0x5a, 0x84, 0xe8, 0x87, 0x6a, 0xd4, 0xb2, 0x1c, 0x02,
	0xe7, 0x22, 0xc4, 0x2b, 0xe5, 0x7e, 0x03, 0x7d, 0x85, 0xda, 0x7f, 0x8d, 0xe8, 0x27, 0x4c, 0xa3,
	0x1a, 0xb5, 0xc7, 0x8d, 0x43, 0xe7, 0xf8, 0x60, 0xca, 0x31, 0x9d, 0x5e, 0xa3, 0x7e, 0x81, 0xe8,
	0x19, 0x9c, 0x5c, 0xbd, 0x7c, 0xcf, 0x73, 0x54, 0x89, 0xb9, 0xcf, 0xc1, 0x61, 0x9c, 0xfb, 0x1c,
	0x63, 0xa9, 0x84, 0x1e, 0x6d, 0x91, 0x74, 0x9f, 0xa4, 0x67, 0x9c, 0x7f, 0x67, 0xe1, 0x5c, 0x09,
	0xac, 0x80, 0xdc, 0x4b, 0x18, 0x8a, 0x48, 0x68, 0xc1, 0x34, 0xfa, 0x2b, 0xa1, 0x6f, 0x79, 0xc2,
	0x56, 0xa3, 0x6d, 0x92, 0x3f, 0x25, 0xf9, 0x65, 0x16, 0xfd, 0x31, 0x0b, 0xe6, 0x49, 0x06, 0xa2,
	0x16, 0x30, 0x1e, 0xe2, 0x25, 0x0b, 0xd0, 0x97, 0x09, 0xc7, 0x64, 0xb4, 0x53, 0xf1, 0xf0, 0xca,
	0xe0, 0xdf, 0x1b, 0xb8, 0xf0, 0x10, 0x17, 0x90, 0xfb, 0x35, 0xf4, 0x02, 0x16, 0x05, 0xb8, 0xcc,
	0x94, 0x9d, 0xca, 0x0f, 0xbf, 0xa0, 0xc0, 0x9a, 0xd4, 0x09, 0x4a, 0xcc, 0x68, 0x43, 0xa6, 0x83,
	0x5b, 0x2b, 0x55, 0xa3, 0x6e, 0x45, 0x7b, 0x65, 0x02, 0x44, 0x2b, 0x0f, 0x2d, 0x2c, 0x31, 0xf7,
	0x5b, 0xd8, 0xc5, 0x34, 0x16, 0x09, 0xf2, 0x5c, 0x0d, 0xa4, 0x7e, 0x42, 0xea, 0x99, 0x0d, 0xad,
	0xeb, 0xfb, 0x58, 0x45, 0xcf, 0xb7, 0xa1, 0xbd, 0x90, 0xfc, 0x97, 0xc9, 0x9f, 0x0d, 0x18, 0xd4,
	0x5b, 0xe4, 0x7e, 0x0e, 0xc3, 0x90, 0xdd, 0x61, 0x52, 0xb4, 0xd4, 0xc7, 0x13, 0x1a, 0x9f, 0xb6,
	0xb7, 0x4b, 0x81, 0x8c, 0x3e, 0x3b, 0x31, 0x54, 0xbd, 0x41, 0x6d, 0x5a, 0xaa, 0x5e, 0xa7, 0x1e,
	0xc1, 0x7e, 0xde, 0xa7, 0x35, 0x76, 0x8b, 0xd8, 0xc3, 0x3c, 0x56, 0x08, 0x26, 0xbf, 0x36, 0x61,
	0xaf, 0x36, 0x03, 0x66, 0xa6, 0x43, 0x96, 0xdc, 0xa1, 0xf6, 0x19, 0xe7, 0x09, 0x99, 0xea, 0x7a,
	0x60, 0xa1, 0x33, 0xce, 0x13, 0x43, 0xa0, 0xfb, 0x92, 0x58, 0x42, 0xd3, 0x12, 0x2c, 0x44, 0x84,
	0x0f, 0xa1, 0xa3, 0xe5, 0x1d, 0x46, 0xbe, 0xe0, 0x54, 0xba, 0xeb, 0xed, 0xd0, 0xf7, 0x4b, 0xee,
	0x7e, 0x04, 0x60, 0x43, 0x81, 0xe4, 0x48, 0x53, 0xdc, 0xf7, 0xba, 0x84, 0x5c, 0x48, 0x8e, 0xee,
	0x33, 0xe8, 0xb2, 0x50, 0xbe, 0x89, 0xb4, 0x8f, 0xa7, 0x34, 0xa8, 0x6d, 0xaf, 0x63, 0x81, 0xd9,
	0xa9, 0x7b, 0x0c, 0x4e, 0x84, 0x2b, 0x7f, 0xc1, 0x96, 0xa6, 0xc7, 0xd9, 0x20, 0x0e, 0xa9, 0x1f,
	0x73, 0x93, 0xe1, 0xdc, 0x06, 0x3c, 0x88, 0x70, 0x95, 0x7d, 0x76, 0x27, 0xd0, 0xcb, 0xe6, 0x9e,
	0x2e, 0x1b, 0x0d, 0x5e, 0xcb, 0x5b, 0xc3, 0x26, 0x7f, 0x34, 0xe1, 0xe0, 0xde, 0x49, 0xfe, 0xff,
	0x1e, 0xc5, 0x67, 0xb0, 0xb7, 0xd6, 0x68, 0x3c, 0xa5, 0xe3, 0x68, 0x7b, 0xfd, 0x4a, 0x8f, 0x37,
	0x8f, 0x6c, 0xe7, 0x1d, 0x8e, 0x6c, 0xf2, 0x5b, 0x03, 0xf6, 0x6a, 0x77, 0xf2, 0xf1, 0x83, 0x18,
	0xc3, 0x96, 0xbd, 0x9f, 0x4d, 0x2a, 0x01, 0x54, 0x82, 0x12, 0x78, 0x36, 0x50, 0xb7, 0xd2, 0x7a,
	0x17, 0x2b, 0xbf, 0x37, 0x60, 0x50, 0xbf, 0xe4, 0xff, 0x95, 0x97, 0x7f, 0xb6, 0x60, 0x50, 0x5f,
	0x1a, 0x8f, 0x7b, 0x79, 0x06, 0xdd, 0x98, 0x89, 0xc4, 0xf6, 0xb8, 0x49, 0x3d, 0xee, 0x18, 0x80,
	0x5a, 0x3c, 0x86, 0x1e, 0xa6, 0xe8, 0xc7, 0x89, 0x08, 0xa8, 0x85, 0xf6, 0x9a, 0x02, 0xa6, 0xf8,
	0xca, 0x40, 0xb3, 0x53, 0xf3, 0xdf, 0x60, 0x18, 0xe5, 0x20, 0xb4, 0x89, 0xe2, 0x60, 0x8a, 0x67,
	0xf9, 0x2c, 0x8c, 0xcd, 0x96, 0xcb, 0xf7, 0x43, 0x31, 0x2b, 0x90, 0x6f, 0x11, 0xcb, 0xd0, 0x55,
	0x86, 0x1d, 0x15, 0xd0, 0x25, 0xe3, 0x39, 0x8c, 0x56, 0x4c, 0xf9, 0x36, 0x0f, 0x9d, 0x91, 0xff,
	0x26, 0x7a, 0x2d, 0x96, 0x4b, 0xe4, 0x34, 0x34, 0x1d, 0xef, 0x60, 0xc5, 0xd4, 0x95, 0x09, 0xd3,
	0xcf, 0xff, 0x21, 0x0b, 0xe6, 0x42, 0x7d, 0x9f, 0xb0, 0x53, 0x08, 0xe7, 0x9b, 0xc2, 0x63, 0xd8,
	0x33, 0x2d, 0xa8, 0x54, 0xcc, 0xd6, 0x73, 0xb5, 0x5d, 0xfd, 0x08, 0x57, 0x65, 0xd1, 0x5c, 0x53,
	0x29, 0x96, 0x2d, 0xe5, 0xba, 0xa6, 0xac, 0xe7, 0xbe, 0x80, 0x0f, 0xca, 0x3a, 0x01, 0x53, 0xb7,
	0x45, 0xd7, 0x9d, 0x87, 0xba, 0xfe, 0x7e, 0x5e, 0xf5, 0x82, 0xa9, 0xdb, 0x7c, 0x91, 0xbc, 0x84,
	0x27, 0x65, 0x1e, 0xa5, 0x65, 0x70, 0x57, 0x24, 0xea, 0x3d, 0x94, 0x68, 0x3f, 0x4f, 0x74, 0x6d,
	0xf8, 0x79, 0xa6, 0xcc, 0x91, 0xde, 0x74, 0xd4, 0x7f, 0x9b, 0xa3, 0xf9, 0x03, 0x8e, 0xf4, 0x3d,
	0x8e, 0x76, 0xdf, 0xe6, 0x68, 0x5e, 0x77, 0x34, 0xf9, 0xbb, 0x01, 0xee, 0xe6, 0x3f, 0xda, 0xe3,
	0xc3, 0xfd, 0x29, 0xec, 0x56, 0x5e, 0x2e, 0x0a, 0x83, 0xec, 0x79, 0xd3, 0x2b, 0x9e, 0x2e, 0xd7,
	0x18, 0x98, 0x27, 0x50, 0x65, 0x47, 0x9a, 0xe7, 0x4d, 0xeb, 0xb0, 0xeb, 0x39, 0xe5, 0x92, 0x54,
	0xee, 0x09, 0xf4, 0x2a, 0xf7, 0xd1, 0xbc, 0x6e, 0x5a, 0xf7, 0xfb, 0x77, 0xca, 0x0b, 0xa9, 0xce,
	0xbf, 0xfc, 0xe9, 0x8b, 0x1b, 0xa1, 0xa7, 0x0b, 0xb1, 0x90, 0xe9, 0x34, 0x90, 0xe1, 0x11, 0xc7,
	0x54, 0xcb, 0xf8, 0xc8, 0x3c, 0xae, 0x64, 0x34, 0xbd, 0x11, 0xfa, 0x88, 0x1e, 0x6d, 0x06, 0x3f,
	0x5e, 0x6c, 0xd3, 0xe7, 0xaf, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x91, 0x44, 0x99, 0x6e, 0xec,
	0x09, 0x00, 0x00,
}
