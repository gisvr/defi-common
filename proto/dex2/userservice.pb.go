// Code generated by protoc-gen-go. DO NOT EDIT.
// source: userservice.proto

package dex2

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//----------------------------- Authenticate -------------------------------------
type AuthenticateRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// 账户(EOS)或者地址(ETH)
	Trader string `protobuf:"bytes,2,opt,name=trader,proto3" json:"trader,omitempty"`
	// 所属网络：ETH或EOS。
	Chain string `protobuf:"bytes,3,opt,name=chain,proto3" json:"chain,omitempty"`
	// 用户来源： 登陆签名工具名称。
	UserFrom string `protobuf:"bytes,4,opt,name=user_from,json=userFrom,proto3" json:"user_from,omitempty"`
	Sig      string `protobuf:"bytes,5,opt,name=sig,proto3" json:"sig,omitempty"`
	// 签名时提示的超时时间。
	Expire               int64    `protobuf:"varint,6,opt,name=expire,proto3" json:"expire,omitempty"`
	Ua                   string   `protobuf:"bytes,7,opt,name=ua,proto3" json:"ua,omitempty"`
	Ip                   string   `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
	Device               string   `protobuf:"bytes,9,opt,name=device,proto3" json:"device,omitempty"`
	AuthType             string   `protobuf:"bytes,10,opt,name=auth_type,json=authType,proto3" json:"auth_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthenticateRequest) Reset()         { *m = AuthenticateRequest{} }
func (m *AuthenticateRequest) String() string { return proto.CompactTextString(m) }
func (*AuthenticateRequest) ProtoMessage()    {}
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68a7ca558839fd2b, []int{0}
}

func (m *AuthenticateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthenticateRequest.Unmarshal(m, b)
}
func (m *AuthenticateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthenticateRequest.Marshal(b, m, deterministic)
}
func (m *AuthenticateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticateRequest.Merge(m, src)
}
func (m *AuthenticateRequest) XXX_Size() int {
	return xxx_messageInfo_AuthenticateRequest.Size(m)
}
func (m *AuthenticateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticateRequest proto.InternalMessageInfo

func (m *AuthenticateRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *AuthenticateRequest) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

func (m *AuthenticateRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *AuthenticateRequest) GetUserFrom() string {
	if m != nil {
		return m.UserFrom
	}
	return ""
}

func (m *AuthenticateRequest) GetSig() string {
	if m != nil {
		return m.Sig
	}
	return ""
}

func (m *AuthenticateRequest) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *AuthenticateRequest) GetUa() string {
	if m != nil {
		return m.Ua
	}
	return ""
}

func (m *AuthenticateRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *AuthenticateRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *AuthenticateRequest) GetAuthType() string {
	if m != nil {
		return m.AuthType
	}
	return ""
}

type AuthenticateResponse struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthenticateResponse) Reset()         { *m = AuthenticateResponse{} }
func (m *AuthenticateResponse) String() string { return proto.CompactTextString(m) }
func (*AuthenticateResponse) ProtoMessage()    {}
func (*AuthenticateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68a7ca558839fd2b, []int{1}
}

func (m *AuthenticateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthenticateResponse.Unmarshal(m, b)
}
func (m *AuthenticateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthenticateResponse.Marshal(b, m, deterministic)
}
func (m *AuthenticateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticateResponse.Merge(m, src)
}
func (m *AuthenticateResponse) XXX_Size() int {
	return xxx_messageInfo_AuthenticateResponse.Size(m)
}
func (m *AuthenticateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticateResponse proto.InternalMessageInfo

func (m *AuthenticateResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Exactly one of the these fields should be set. `email` takes precedence if both are set.
type GetUserLogRequest struct {
	Trader               string   `protobuf:"bytes,1,opt,name=trader,proto3" json:"trader,omitempty"`
	Action               int32    `protobuf:"varint,2,opt,name=action,proto3" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserLogRequest) Reset()         { *m = GetUserLogRequest{} }
func (m *GetUserLogRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserLogRequest) ProtoMessage()    {}
func (*GetUserLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68a7ca558839fd2b, []int{2}
}

func (m *GetUserLogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserLogRequest.Unmarshal(m, b)
}
func (m *GetUserLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserLogRequest.Marshal(b, m, deterministic)
}
func (m *GetUserLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserLogRequest.Merge(m, src)
}
func (m *GetUserLogRequest) XXX_Size() int {
	return xxx_messageInfo_GetUserLogRequest.Size(m)
}
func (m *GetUserLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserLogRequest proto.InternalMessageInfo

func (m *GetUserLogRequest) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

func (m *GetUserLogRequest) GetAction() int32 {
	if m != nil {
		return m.Action
	}
	return 0
}

type GetUserLogResponse struct {
	UserLog              []*UserLog `protobuf:"bytes,1,rep,name=userLog,proto3" json:"userLog,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetUserLogResponse) Reset()         { *m = GetUserLogResponse{} }
func (m *GetUserLogResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserLogResponse) ProtoMessage()    {}
func (*GetUserLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68a7ca558839fd2b, []int{3}
}

func (m *GetUserLogResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserLogResponse.Unmarshal(m, b)
}
func (m *GetUserLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserLogResponse.Marshal(b, m, deterministic)
}
func (m *GetUserLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserLogResponse.Merge(m, src)
}
func (m *GetUserLogResponse) XXX_Size() int {
	return xxx_messageInfo_GetUserLogResponse.Size(m)
}
func (m *GetUserLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserLogResponse proto.InternalMessageInfo

func (m *GetUserLogResponse) GetUserLog() []*UserLog {
	if m != nil {
		return m.UserLog
	}
	return nil
}

//----------------------------- GetVerifierKey -----------------------------------
type GetVerifierKeyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVerifierKeyRequest) Reset()         { *m = GetVerifierKeyRequest{} }
func (m *GetVerifierKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GetVerifierKeyRequest) ProtoMessage()    {}
func (*GetVerifierKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68a7ca558839fd2b, []int{4}
}

func (m *GetVerifierKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVerifierKeyRequest.Unmarshal(m, b)
}
func (m *GetVerifierKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVerifierKeyRequest.Marshal(b, m, deterministic)
}
func (m *GetVerifierKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVerifierKeyRequest.Merge(m, src)
}
func (m *GetVerifierKeyRequest) XXX_Size() int {
	return xxx_messageInfo_GetVerifierKeyRequest.Size(m)
}
func (m *GetVerifierKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVerifierKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVerifierKeyRequest proto.InternalMessageInfo

type GetVerifierKeyResponse struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVerifierKeyResponse) Reset()         { *m = GetVerifierKeyResponse{} }
func (m *GetVerifierKeyResponse) String() string { return proto.CompactTextString(m) }
func (*GetVerifierKeyResponse) ProtoMessage()    {}
func (*GetVerifierKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68a7ca558839fd2b, []int{5}
}

func (m *GetVerifierKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVerifierKeyResponse.Unmarshal(m, b)
}
func (m *GetVerifierKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVerifierKeyResponse.Marshal(b, m, deterministic)
}
func (m *GetVerifierKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVerifierKeyResponse.Merge(m, src)
}
func (m *GetVerifierKeyResponse) XXX_Size() int {
	return xxx_messageInfo_GetVerifierKeyResponse.Size(m)
}
func (m *GetVerifierKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVerifierKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVerifierKeyResponse proto.InternalMessageInfo

func (m *GetVerifierKeyResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*AuthenticateRequest)(nil), "dex.AuthenticateRequest")
	proto.RegisterType((*AuthenticateResponse)(nil), "dex.AuthenticateResponse")
	proto.RegisterType((*GetUserLogRequest)(nil), "dex.GetUserLogRequest")
	proto.RegisterType((*GetUserLogResponse)(nil), "dex.GetUserLogResponse")
	proto.RegisterType((*GetVerifierKeyRequest)(nil), "dex.GetVerifierKeyRequest")
	proto.RegisterType((*GetVerifierKeyResponse)(nil), "dex.GetVerifierKeyResponse")
}

func init() { proto.RegisterFile("userservice.proto", fileDescriptor_68a7ca558839fd2b) }

var fileDescriptor_68a7ca558839fd2b = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x14, 0x94, 0x63, 0x92, 0x36, 0xaf, 0x55, 0xd4, 0x2e, 0x25, 0x5d, 0xdc, 0x4b, 0xe4, 0x03, 0x8a,
	0xaa, 0xca, 0x91, 0xc2, 0x15, 0x0e, 0x50, 0x89, 0x0a, 0xc1, 0x29, 0x7c, 0x1c, 0xb8, 0x54, 0x1b,
	0xfb, 0xd5, 0x59, 0x45, 0xf6, 0x9a, 0xf5, 0x33, 0xb2, 0xff, 0x2b, 0x7f, 0x82, 0x7f, 0x80, 0xf6,
	0xc3, 0x6a, 0xd3, 0xe4, 0xe6, 0x99, 0xf7, 0x76, 0x66, 0x67, 0xbc, 0x70, 0xde, 0xd4, 0xa8, 0x6b,
	0xd4, 0x7f, 0x64, 0x8a, 0x49, 0xa5, 0x15, 0x29, 0x16, 0x66, 0xd8, 0x46, 0x13, 0xc3, 0x67, 0x82,
	0x84, 0x23, 0xe3, 0x7f, 0x01, 0xbc, 0xfc, 0xd0, 0xd0, 0x06, 0x4b, 0x92, 0xa9, 0x20, 0x5c, 0xe1,
	0xef, 0x06, 0x6b, 0x62, 0x67, 0x10, 0x36, 0x32, 0xe3, 0xc1, 0x2c, 0x98, 0x8f, 0x57, 0xe6, 0x93,
	0x4d, 0x61, 0x44, 0x5a, 0x64, 0xa8, 0xf9, 0xc0, 0x92, 0x1e, 0xb1, 0x0b, 0x18, 0xa6, 0x1b, 0x21,
	0x4b, 0x1e, 0x5a, 0xda, 0x01, 0x76, 0x05, 0x63, 0xe3, 0x74, 0xff, 0xa0, 0x55, 0xc1, 0x5f, 0xd8,
	0xc9, 0xb1, 0x21, 0x3e, 0x69, 0x55, 0x18, 0xf1, 0x5a, 0xe6, 0x7c, 0xe8, 0xc4, 0x6b, 0x99, 0x1b,
	0x71, 0x6c, 0x2b, 0xa9, 0x91, 0x8f, 0x66, 0xc1, 0x3c, 0x5c, 0x79, 0xc4, 0x26, 0x30, 0x68, 0x04,
	0x3f, 0xb2, 0x8b, 0x83, 0x46, 0x18, 0x2c, 0x2b, 0x7e, 0xec, 0xb0, 0xac, 0xcc, 0xb9, 0x0c, 0x4d,
	0x46, 0x3e, 0x76, 0x97, 0x72, 0xc8, 0xd8, 0x8b, 0x86, 0x36, 0xf7, 0xd4, 0x55, 0xc8, 0xc1, 0xd9,
	0x1b, 0xe2, 0x7b, 0x57, 0x61, 0x7c, 0x03, 0x17, 0xbb, 0x91, 0xeb, 0x4a, 0x95, 0x35, 0x9a, 0x24,
	0xa4, 0xb6, 0x58, 0xfa, 0xd4, 0x0e, 0xc4, 0xb7, 0x70, 0x7e, 0x87, 0xf4, 0xa3, 0x46, 0xfd, 0x55,
	0xe5, 0x7d, 0x3d, 0x8f, 0x65, 0x04, 0x3b, 0x65, 0x4c, 0x61, 0x24, 0x52, 0x92, 0xaa, 0xb4, 0x25,
	0x0d, 0x57, 0x1e, 0xc5, 0xef, 0x80, 0x3d, 0x15, 0xf1, 0x86, 0x6f, 0xe0, 0xa8, 0x71, 0x14, 0x0f,
	0x66, 0xe1, 0xfc, 0x64, 0x79, 0x9a, 0x64, 0xd8, 0x26, 0xfd, 0x5a, 0x3f, 0x8c, 0x2f, 0xe1, 0xd5,
	0x1d, 0xd2, 0x4f, 0xd4, 0xf2, 0x41, 0xa2, 0xfe, 0x82, 0x9d, 0xbf, 0x46, 0x7c, 0x0d, 0xd3, 0xe7,
	0x03, 0x2f, 0x7d, 0x06, 0xe1, 0x16, 0xbb, 0xfe, 0xff, 0x6d, 0xb1, 0x5b, 0xfe, 0x0d, 0xe0, 0xc4,
	0x28, 0x7f, 0x73, 0x8f, 0x82, 0xdd, 0xc2, 0xe9, 0xd3, 0x16, 0x18, 0xb7, 0xde, 0x07, 0xde, 0x42,
	0xf4, 0xfa, 0xc0, 0xc4, 0xdb, 0xbc, 0x07, 0x78, 0xcc, 0xc5, 0xa6, 0x76, 0x71, 0xaf, 0xad, 0xe8,
	0x72, 0x8f, 0xf7, 0xc7, 0x3f, 0xc3, 0x64, 0xf7, 0xfe, 0x2c, 0xea, 0x57, 0xf7, 0xd3, 0x46, 0x57,
	0x07, 0x67, 0x4e, 0xea, 0xe3, 0xcd, 0xaf, 0xeb, 0x5c, 0x52, 0xb2, 0x96, 0x6b, 0xd5, 0x26, 0xa9,
	0x2a, 0x16, 0x19, 0xb6, 0xa4, 0xaa, 0x45, 0xaa, 0x8a, 0x42, 0x95, 0x49, 0x2e, 0x69, 0x61, 0x5f,
	0xbc, 0xe1, 0x97, 0xeb, 0x91, 0xfd, 0x7e, 0xfb, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x86, 0x96, 0xb1,
	0x3f, 0x27, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	// authenticate with user credentials
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	// get user login log
	GetUserLog(ctx context.Context, in *GetUserLogRequest, opts ...grpc.CallOption) (*GetUserLogResponse, error)
	// 获取JWT token签名需要的信息，用于校验。
	GetVerifierKey(ctx context.Context, in *GetVerifierKeyRequest, opts ...grpc.CallOption) (*GetVerifierKeyResponse, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/dex.UserService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserLog(ctx context.Context, in *GetUserLogRequest, opts ...grpc.CallOption) (*GetUserLogResponse, error) {
	out := new(GetUserLogResponse)
	err := c.cc.Invoke(ctx, "/dex.UserService/GetUserLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetVerifierKey(ctx context.Context, in *GetVerifierKeyRequest, opts ...grpc.CallOption) (*GetVerifierKeyResponse, error) {
	out := new(GetVerifierKeyResponse)
	err := c.cc.Invoke(ctx, "/dex.UserService/GetVerifierKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	// authenticate with user credentials
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	// get user login log
	GetUserLog(context.Context, *GetUserLogRequest) (*GetUserLogResponse, error)
	// 获取JWT token签名需要的信息，用于校验。
	GetVerifierKey(context.Context, *GetVerifierKeyRequest) (*GetVerifierKeyResponse, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dex.UserService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dex.UserService/GetUserLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserLog(ctx, req.(*GetUserLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetVerifierKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVerifierKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetVerifierKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dex.UserService/GetVerifierKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetVerifierKey(ctx, req.(*GetVerifierKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dex.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _UserService_Authenticate_Handler,
		},
		{
			MethodName: "GetUserLog",
			Handler:    _UserService_GetUserLog_Handler,
		},
		{
			MethodName: "GetVerifierKey",
			Handler:    _UserService_GetVerifierKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userservice.proto",
}
