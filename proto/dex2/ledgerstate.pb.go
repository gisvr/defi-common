// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ledgerstate.proto

package dex2

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Labels for marking markets.
type MarketLabel int32

const (
	MarketLabel_NoneLabel MarketLabel = 0
	// The main market on Ethereum.
	MarketLabel_EthMain MarketLabel = 1
)

var MarketLabel_name = map[int32]string{
	0: "NoneLabel",
	1: "EthMain",
}

var MarketLabel_value = map[string]int32{
	"NoneLabel": 0,
	"EthMain":   1,
}

func (x MarketLabel) String() string {
	return proto.EnumName(MarketLabel_name, int32(x))
}

func (MarketLabel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d846767133be461e, []int{0}
}

type Order_Action int32

const (
	Order_UnknownAction Order_Action = 0
	Order_Buy           Order_Action = 1
	Order_Sell          Order_Action = 2
)

var Order_Action_name = map[int32]string{
	0: "UnknownAction",
	1: "Buy",
	2: "Sell",
}

var Order_Action_value = map[string]int32{
	"UnknownAction": 0,
	"Buy":           1,
	"Sell":          2,
}

func (x Order_Action) String() string {
	return proto.EnumName(Order_Action_name, int32(x))
}

func (Order_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d846767133be461e, []int{7, 0}
}

// Transition:
//           Pending  =>        Unfilled | Rejected
//          Unfilled  => PartiallyFilled | Cancelled | Expired
//   PartiallyFilled  =>          Filled | PartiallyCancelled | PartiallyExpired
type Order_Status int32

const (
	Order_UnknownStatus   Order_Status = 0
	Order_Unfilled        Order_Status = 2
	Order_PartiallyFilled Order_Status = 3
	//--- inactive status: ---
	Order_Rejected           Order_Status = 4
	Order_Filled             Order_Status = 5
	Order_Cancelled          Order_Status = 6
	Order_PartiallyCancelled Order_Status = 7
	Order_Expired            Order_Status = 8
	Order_PartiallyExpired   Order_Status = 9
)

var Order_Status_name = map[int32]string{
	0: "UnknownStatus",
	2: "Unfilled",
	3: "PartiallyFilled",
	4: "Rejected",
	5: "Filled",
	6: "Cancelled",
	7: "PartiallyCancelled",
	8: "Expired",
	9: "PartiallyExpired",
}

var Order_Status_value = map[string]int32{
	"UnknownStatus":      0,
	"Unfilled":           2,
	"PartiallyFilled":    3,
	"Rejected":           4,
	"Filled":             5,
	"Cancelled":          6,
	"PartiallyCancelled": 7,
	"Expired":            8,
	"PartiallyExpired":   9,
}

func (x Order_Status) String() string {
	return proto.EnumName(Order_Status_name, int32(x))
}

func (Order_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d846767133be461e, []int{7, 1}
}

// LedgerState is a normalized representation of a ledger. Every field of the ledger can be
// retrieved or derived from the LedgerState message.
type LedgerState struct {
	// The version of the state machine by which this ledger state is generated.
	//
	// Sanity check - before loading a LedgerState message, the program must check that the state
	// machine in use has extactly the same version to the message.
	Version *LedgerVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The last commit index. 0 for a fresh ledger, i.e. the first commit has index 1.
	CommitIndex int64 `protobuf:"varint,2,opt,name=commit_index,json=commitIndex,proto3" json:"commit_index,omitempty"`
	// The last event index. 0 for a fresh ledger, i.e. the first event has index 1.
	EventIndex int64 `protobuf:"varint,3,opt,name=event_index,json=eventIndex,proto3" json:"event_index,omitempty"`
	// The ledger-wise logic time. Must push forward this time with the timestamp of every
	// non-readonly request before executing the request itself.
	LogicTimeMs int64 `protobuf:"varint,4,opt,name=logic_time_ms,json=logicTimeMs,proto3" json:"logic_time_ms,omitempty"`
	// The states of the market in the ledger. Nil before a market is created.
	MarketState          *MarketState `protobuf:"bytes,5,opt,name=market_state,json=marketState,proto3" json:"market_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *LedgerState) Reset()         { *m = LedgerState{} }
func (m *LedgerState) String() string { return proto.CompactTextString(m) }
func (*LedgerState) ProtoMessage()    {}
func (*LedgerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d846767133be461e, []int{0}
}

func (m *LedgerState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LedgerState.Unmarshal(m, b)
}
func (m *LedgerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LedgerState.Marshal(b, m, deterministic)
}
func (m *LedgerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerState.Merge(m, src)
}
func (m *LedgerState) XXX_Size() int {
	return xxx_messageInfo_LedgerState.Size(m)
}
func (m *LedgerState) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerState.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerState proto.InternalMessageInfo

func (m *LedgerState) GetVersion() *LedgerVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *LedgerState) GetCommitIndex() int64 {
	if m != nil {
		return m.CommitIndex
	}
	return 0
}

func (m *LedgerState) GetEventIndex() int64 {
	if m != nil {
		return m.EventIndex
	}
	return 0
}

func (m *LedgerState) GetLogicTimeMs() int64 {
	if m != nil {
		return m.LogicTimeMs
	}
	return 0
}

func (m *LedgerState) GetMarketState() *MarketState {
	if m != nil {
		return m.MarketState
	}
	return nil
}

type LedgerVersion struct {
	// Different major versions are incompatible to each other.
	Major int32 `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	// Within a major version, minor versions are backward compatible.
	Minor                int32    `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LedgerVersion) Reset()         { *m = LedgerVersion{} }
func (m *LedgerVersion) String() string { return proto.CompactTextString(m) }
func (*LedgerVersion) ProtoMessage()    {}
func (*LedgerVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_d846767133be461e, []int{1}
}

func (m *LedgerVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LedgerVersion.Unmarshal(m, b)
}
func (m *LedgerVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LedgerVersion.Marshal(b, m, deterministic)
}
func (m *LedgerVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerVersion.Merge(m, src)
}
func (m *LedgerVersion) XXX_Size() int {
	return xxx_messageInfo_LedgerVersion.Size(m)
}
func (m *LedgerVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerVersion.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerVersion proto.InternalMessageInfo

func (m *LedgerVersion) GetMajor() int32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *LedgerVersion) GetMinor() int32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

// MarketState is a normalized representation of a market. Every field of the market can be
// retrieved or derived from the MarketState message.
type MarketState struct {
	MarketAddr string `protobuf:"bytes,1,opt,name=market_addr,json=marketAddr,proto3" json:"market_addr,omitempty"`
	// Label on the market;
	Label MarketLabel `protobuf:"varint,2,opt,name=label,proto3,enum=dex.MarketLabel" json:"label,omitempty"`
	// Config of the market.
	Config *MarketConfig `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	// Next order id.
	NextOrderId int64 `protobuf:"varint,5,opt,name=next_order_id,json=nextOrderId,proto3" json:"next_order_id,omitempty"`
	// Index of the last added deposit. The first deposit has index 1.
	LastDepositIndex int64 `protobuf:"varint,6,opt,name=last_deposit_index,json=lastDepositIndex,proto3" json:"last_deposit_index,omitempty"`
	// The states of all non-empty accounts in the market.
	Accounts []*AccountState `protobuf:"bytes,7,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// All active orders in the market (includes pending orders but NOT inactive orders).
	Orders               []*Order `protobuf:"bytes,8,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketState) Reset()         { *m = MarketState{} }
func (m *MarketState) String() string { return proto.CompactTextString(m) }
func (*MarketState) ProtoMessage()    {}
func (*MarketState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d846767133be461e, []int{2}
}

func (m *MarketState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketState.Unmarshal(m, b)
}
func (m *MarketState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketState.Marshal(b, m, deterministic)
}
func (m *MarketState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketState.Merge(m, src)
}
func (m *MarketState) XXX_Size() int {
	return xxx_messageInfo_MarketState.Size(m)
}
func (m *MarketState) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketState.DiscardUnknown(m)
}

var xxx_messageInfo_MarketState proto.InternalMessageInfo

func (m *MarketState) GetMarketAddr() string {
	if m != nil {
		return m.MarketAddr
	}
	return ""
}

func (m *MarketState) GetLabel() MarketLabel {
	if m != nil {
		return m.Label
	}
	return MarketLabel_NoneLabel
}

func (m *MarketState) GetConfig() *MarketConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *MarketState) GetNextOrderId() int64 {
	if m != nil {
		return m.NextOrderId
	}
	return 0
}

func (m *MarketState) GetLastDepositIndex() int64 {
	if m != nil {
		return m.LastDepositIndex
	}
	return 0
}

func (m *MarketState) GetAccounts() []*AccountState {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *MarketState) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

// MarketConfig
type MarketConfig struct {
	MakerFeeRateE4    uint64 `protobuf:"varint,1,opt,name=maker_fee_rate_e4,json=makerFeeRateE4,proto3" json:"maker_fee_rate_e4,omitempty"`
	TakerFeeRateE4    uint64 `protobuf:"varint,2,opt,name=taker_fee_rate_e4,json=takerFeeRateE4,proto3" json:"taker_fee_rate_e4,omitempty"`
	WithdrawFeeRateE4 uint64 `protobuf:"varint,3,opt,name=withdraw_fee_rate_e4,json=withdrawFeeRateE4,proto3" json:"withdraw_fee_rate_e4,omitempty"`
	// The tokens that are can be used as cash in this market.
	CashTokens []*TokenInfo `protobuf:"bytes,5,rep,name=cash_tokens,json=cashTokens,proto3" json:"cash_tokens,omitempty"`
	// The tokens that can be traded as stock in this market.
	StockTokens []*TokenInfo `protobuf:"bytes,6,rep,name=stock_tokens,json=stockTokens,proto3" json:"stock_tokens,omitempty"`
	// The tokens that can neither be used as cash, nor be used as stock.
	DisabledTokens       []*TokenInfo `protobuf:"bytes,7,rep,name=disabled_tokens,json=disabledTokens,proto3" json:"disabled_tokens,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MarketConfig) Reset()         { *m = MarketConfig{} }
func (m *MarketConfig) String() string { return proto.CompactTextString(m) }
func (*MarketConfig) ProtoMessage()    {}
func (*MarketConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d846767133be461e, []int{3}
}

func (m *MarketConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketConfig.Unmarshal(m, b)
}
func (m *MarketConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketConfig.Marshal(b, m, deterministic)
}
func (m *MarketConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketConfig.Merge(m, src)
}
func (m *MarketConfig) XXX_Size() int {
	return xxx_messageInfo_MarketConfig.Size(m)
}
func (m *MarketConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MarketConfig proto.InternalMessageInfo

func (m *MarketConfig) GetMakerFeeRateE4() uint64 {
	if m != nil {
		return m.MakerFeeRateE4
	}
	return 0
}

func (m *MarketConfig) GetTakerFeeRateE4() uint64 {
	if m != nil {
		return m.TakerFeeRateE4
	}
	return 0
}

func (m *MarketConfig) GetWithdrawFeeRateE4() uint64 {
	if m != nil {
		return m.WithdrawFeeRateE4
	}
	return 0
}

func (m *MarketConfig) GetCashTokens() []*TokenInfo {
	if m != nil {
		return m.CashTokens
	}
	return nil
}

func (m *MarketConfig) GetStockTokens() []*TokenInfo {
	if m != nil {
		return m.StockTokens
	}
	return nil
}

func (m *MarketConfig) GetDisabledTokens() []*TokenInfo {
	if m != nil {
		return m.DisabledTokens
	}
	return nil
}

type TokenInfo struct {
	TokenId              string   `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TokenCode            uint32   `protobuf:"varint,2,opt,name=token_code,json=tokenCode,proto3" json:"token_code,omitempty"`
	TokenAddr            string   `protobuf:"bytes,3,opt,name=token_addr,json=tokenAddr,proto3" json:"token_addr,omitempty"`
	ScaleFactor          uint64   `protobuf:"varint,4,opt,name=scale_factor,json=scaleFactor,proto3" json:"scale_factor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenInfo) Reset()         { *m = TokenInfo{} }
func (m *TokenInfo) String() string { return proto.CompactTextString(m) }
func (*TokenInfo) ProtoMessage()    {}
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d846767133be461e, []int{4}
}

func (m *TokenInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenInfo.Unmarshal(m, b)
}
func (m *TokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenInfo.Marshal(b, m, deterministic)
}
func (m *TokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenInfo.Merge(m, src)
}
func (m *TokenInfo) XXX_Size() int {
	return xxx_messageInfo_TokenInfo.Size(m)
}
func (m *TokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TokenInfo proto.InternalMessageInfo

func (m *TokenInfo) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *TokenInfo) GetTokenCode() uint32 {
	if m != nil {
		return m.TokenCode
	}
	return 0
}

func (m *TokenInfo) GetTokenAddr() string {
	if m != nil {
		return m.TokenAddr
	}
	return ""
}

func (m *TokenInfo) GetScaleFactor() uint64 {
	if m != nil {
		return m.ScaleFactor
	}
	return 0
}

// AccountState is a normalized representation of an account. Every field of the account can be
// retrieved or derived from the account state and the orders belong to the account.
//
// NOTE: the fields and the documentation are tentative.
type AccountState struct {
	TraderAddr string          `protobuf:"bytes,1,opt,name=trader_addr,json=traderAddr,proto3" json:"trader_addr,omitempty"`
	Balances   []*TokenBalance `protobuf:"bytes,2,rep,name=balances,proto3" json:"balances,omitempty"`
	// The nonce of the last executed request of this trader.
	//
	// Every request that needs trader's signature must have a nonce larger than this field. After
	// a request has been executed, this field will be replaced with the nonce of the request. This is
	// to ensure that a signed request cannot be executed more than once.
	Nonce                int64    `protobuf:"varint,10,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountState) Reset()         { *m = AccountState{} }
func (m *AccountState) String() string { return proto.CompactTextString(m) }
func (*AccountState) ProtoMessage()    {}
func (*AccountState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d846767133be461e, []int{5}
}

func (m *AccountState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountState.Unmarshal(m, b)
}
func (m *AccountState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountState.Marshal(b, m, deterministic)
}
func (m *AccountState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountState.Merge(m, src)
}
func (m *AccountState) XXX_Size() int {
	return xxx_messageInfo_AccountState.Size(m)
}
func (m *AccountState) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountState.DiscardUnknown(m)
}

var xxx_messageInfo_AccountState proto.InternalMessageInfo

func (m *AccountState) GetTraderAddr() string {
	if m != nil {
		return m.TraderAddr
	}
	return ""
}

func (m *AccountState) GetBalances() []*TokenBalance {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *AccountState) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type TokenBalance struct {
	// This id of this token.
	TokenId string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// The total amount (multiplied by 1e8), including the locked part, NOT including the pending withdraw.
	TotalE8 uint64 `protobuf:"varint,2,opt,name=total_e8,json=totalE8,proto3" json:"total_e8,omitempty"`
	// The amount (multiplied by 1e8) locked due to, for example, having active orders. This part
	// will be subtracted from the quota of withdrawing and placing new orders.
	LockedE8             uint64   `protobuf:"varint,3,opt,name=locked_e8,json=lockedE8,proto3" json:"locked_e8,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenBalance) Reset()         { *m = TokenBalance{} }
func (m *TokenBalance) String() string { return proto.CompactTextString(m) }
func (*TokenBalance) ProtoMessage()    {}
func (*TokenBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_d846767133be461e, []int{6}
}

func (m *TokenBalance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenBalance.Unmarshal(m, b)
}
func (m *TokenBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenBalance.Marshal(b, m, deterministic)
}
func (m *TokenBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenBalance.Merge(m, src)
}
func (m *TokenBalance) XXX_Size() int {
	return xxx_messageInfo_TokenBalance.Size(m)
}
func (m *TokenBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenBalance.DiscardUnknown(m)
}

var xxx_messageInfo_TokenBalance proto.InternalMessageInfo

func (m *TokenBalance) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *TokenBalance) GetTotalE8() uint64 {
	if m != nil {
		return m.TotalE8
	}
	return 0
}

func (m *TokenBalance) GetLockedE8() uint64 {
	if m != nil {
		return m.LockedE8
	}
	return 0
}

// Must be synced with `PlaceOrderRequest`.
type Order struct {
	// The id of the order, which is a positive value. An earlier order has a lower id.
	OrderId    int64        `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	TraderAddr string       `protobuf:"bytes,2,opt,name=trader_addr,json=traderAddr,proto3" json:"trader_addr,omitempty"`
	Action     Order_Action `protobuf:"varint,3,opt,name=action,proto3,enum=dex.Order_Action" json:"action,omitempty"`
	// The token used as "cash", which is used to buy/sell the stock token.
	//
	// The id of a trade pair has format <cash_token_id>_<stock_token_id>, e.g. "ETH_ADX".
	CashTokenId  string `protobuf:"bytes,4,opt,name=cash_token_id,json=cashTokenId,proto3" json:"cash_token_id,omitempty"`
	StockTokenId string `protobuf:"bytes,5,opt,name=stock_token_id,json=stockTokenId,proto3" json:"stock_token_id,omitempty"`
	// How many cash tokens that 1e8 stock tokens is worth at this price.
	PriceE8 uint64 `protobuf:"varint,6,opt,name=price_e8,json=priceE8,proto3" json:"price_e8,omitempty"`
	// The total amount (multiplied by 1e8) of stock token to buy/sell.
	AmountTotalE8 uint64 `protobuf:"varint,7,opt,name=amount_total_e8,json=amountTotalE8,proto3" json:"amount_total_e8,omitempty"`
	// Do NOT use create time to check which order is accepted earlier. Use order id instead.
	CreateTimeMs  int64 `protobuf:"varint,8,opt,name=create_time_ms,json=createTimeMs,proto3" json:"create_time_ms,omitempty"`
	ExpireTimeSec int64 `protobuf:"varint,9,opt,name=expire_time_sec,json=expireTimeSec,proto3" json:"expire_time_sec,omitempty"`
	// Any portion of an Immediate-Or-Cancel order that cannot be filled immediately is cancelled. A
	// partial fulfillment is possible.
	//
	// TODO: support this.
	Ioc bool `protobuf:"varint,10,opt,name=ioc,proto3" json:"ioc,omitempty"`
	// The nonce of the request that placed this order. See the file comment of tradeservice.proto
	// about nonce.
	Nonce int64 `protobuf:"varint,11,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// A the result of Sign(hash, privKey) in the 65-byte [R || S || V] format where V is 0 or 1.
	Sig []byte `protobuf:"bytes,12,opt,name=sig,proto3" json:"sig,omitempty"`
	// The amount (multiplied by 1e8) left for trading. 0 means the order has been fully filled.
	AmountLeftE8 uint64       `protobuf:"varint,13,opt,name=amount_left_e8,json=amountLeftE8,proto3" json:"amount_left_e8,omitempty"`
	Status       Order_Status `protobuf:"varint,14,opt,name=status,proto3,enum=dex.Order_Status" json:"status,omitempty"`
	UpdateTimeMs int64        `protobuf:"varint,15,opt,name=update_time_ms,json=updateTimeMs,proto3" json:"update_time_ms,omitempty"`
	// The accumulated amount of executed cash amount (multiplied by 1e8).
	AccumulatedFundE8    uint64   `protobuf:"varint,16,opt,name=accumulated_fund_e8,json=accumulatedFundE8,proto3" json:"accumulated_fund_e8,omitempty"`
	BookId               int64    `protobuf:"varint,17,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	UserFrom             string   `protobuf:"bytes,18,opt,name=user_from,json=userFrom,proto3" json:"user_from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_d846767133be461e, []int{7}
}

func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *Order) GetTraderAddr() string {
	if m != nil {
		return m.TraderAddr
	}
	return ""
}

func (m *Order) GetAction() Order_Action {
	if m != nil {
		return m.Action
	}
	return Order_UnknownAction
}

func (m *Order) GetCashTokenId() string {
	if m != nil {
		return m.CashTokenId
	}
	return ""
}

func (m *Order) GetStockTokenId() string {
	if m != nil {
		return m.StockTokenId
	}
	return ""
}

func (m *Order) GetPriceE8() uint64 {
	if m != nil {
		return m.PriceE8
	}
	return 0
}

func (m *Order) GetAmountTotalE8() uint64 {
	if m != nil {
		return m.AmountTotalE8
	}
	return 0
}

func (m *Order) GetCreateTimeMs() int64 {
	if m != nil {
		return m.CreateTimeMs
	}
	return 0
}

func (m *Order) GetExpireTimeSec() int64 {
	if m != nil {
		return m.ExpireTimeSec
	}
	return 0
}

func (m *Order) GetIoc() bool {
	if m != nil {
		return m.Ioc
	}
	return false
}

func (m *Order) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Order) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *Order) GetAmountLeftE8() uint64 {
	if m != nil {
		return m.AmountLeftE8
	}
	return 0
}

func (m *Order) GetStatus() Order_Status {
	if m != nil {
		return m.Status
	}
	return Order_UnknownStatus
}

func (m *Order) GetUpdateTimeMs() int64 {
	if m != nil {
		return m.UpdateTimeMs
	}
	return 0
}

func (m *Order) GetAccumulatedFundE8() uint64 {
	if m != nil {
		return m.AccumulatedFundE8
	}
	return 0
}

func (m *Order) GetBookId() int64 {
	if m != nil {
		return m.BookId
	}
	return 0
}

func (m *Order) GetUserFrom() string {
	if m != nil {
		return m.UserFrom
	}
	return ""
}

func init() {
	proto.RegisterEnum("dex.MarketLabel", MarketLabel_name, MarketLabel_value)
	proto.RegisterEnum("dex.Order_Action", Order_Action_name, Order_Action_value)
	proto.RegisterEnum("dex.Order_Status", Order_Status_name, Order_Status_value)
	proto.RegisterType((*LedgerState)(nil), "dex.LedgerState")
	proto.RegisterType((*LedgerVersion)(nil), "dex.LedgerVersion")
	proto.RegisterType((*MarketState)(nil), "dex.MarketState")
	proto.RegisterType((*MarketConfig)(nil), "dex.MarketConfig")
	proto.RegisterType((*TokenInfo)(nil), "dex.TokenInfo")
	proto.RegisterType((*AccountState)(nil), "dex.AccountState")
	proto.RegisterType((*TokenBalance)(nil), "dex.TokenBalance")
	proto.RegisterType((*Order)(nil), "dex.Order")
}

func init() { proto.RegisterFile("ledgerstate.proto", fileDescriptor_d846767133be461e) }

var fileDescriptor_d846767133be461e = []byte{
	// 1080 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x6e, 0xfe, 0x9c, 0xe4, 0xd8, 0x49, 0x9d, 0xd9, 0x0a, 0x8c, 0x10, 0xa2, 0x6b, 0xad, 0xaa,
	0x76, 0xd5, 0x4d, 0x45, 0x77, 0x25, 0x22, 0x71, 0xd5, 0x96, 0x54, 0x8a, 0xd4, 0x02, 0x72, 0xbb,
	0x5c, 0x70, 0x63, 0x4d, 0x3c, 0x27, 0xa9, 0x37, 0xb6, 0x27, 0xb2, 0x27, 0xdb, 0xec, 0x13, 0xf0,
	0x1e, 0x5c, 0xf0, 0x00, 0x48, 0xbc, 0x0b, 0x8f, 0x83, 0xe6, 0x8c, 0x93, 0xb8, 0x74, 0xc5, 0x5d,
	0xce, 0xf7, 0x7d, 0xe7, 0xcc, 0xf9, 0x9b, 0x71, 0x60, 0x90, 0xa0, 0x98, 0x63, 0x5e, 0x28, 0xae,
	0x70, 0xb8, 0xcc, 0xa5, 0x92, 0xac, 0x21, 0x70, 0xed, 0xff, 0x53, 0x03, 0xfb, 0x86, 0xa8, 0x3b,
	0x4d, 0xb1, 0x53, 0x68, 0x7f, 0xc4, 0xbc, 0x88, 0x65, 0xe6, 0xd5, 0x0e, 0x6b, 0xc7, 0xf6, 0x39,
	0x1b, 0x0a, 0x5c, 0x0f, 0x8d, 0xe4, 0x57, 0xc3, 0x04, 0x1b, 0x09, 0x7b, 0x09, 0x4e, 0x24, 0xd3,
	0x34, 0x56, 0x61, 0x9c, 0x09, 0x5c, 0x7b, 0xf5, 0xc3, 0xda, 0x71, 0x23, 0xb0, 0x0d, 0x36, 0xd1,
	0x10, 0xfb, 0x16, 0x6c, 0xfc, 0x88, 0xd9, 0x46, 0xd1, 0x20, 0x05, 0x10, 0x64, 0x04, 0x3e, 0xf4,
	0x12, 0x39, 0x8f, 0xa3, 0x50, 0xc5, 0x29, 0x86, 0x69, 0xe1, 0x35, 0x4d, 0x10, 0x02, 0xef, 0xe3,
	0x14, 0x6f, 0x0b, 0xf6, 0x16, 0x9c, 0x94, 0xe7, 0x0b, 0x54, 0x21, 0x15, 0xe0, 0xb5, 0x28, 0x35,
	0x97, 0x52, 0xbb, 0x25, 0x82, 0xb2, 0x0f, 0xec, 0x74, 0x67, 0xf8, 0x3f, 0x40, 0xef, 0x49, 0xda,
	0xec, 0x00, 0x5a, 0x29, 0xff, 0x20, 0x73, 0xaa, 0xac, 0x15, 0x18, 0x83, 0xd0, 0x38, 0x93, 0x39,
	0x25, 0xaf, 0x51, 0x6d, 0xf8, 0x7f, 0xd6, 0xc1, 0xae, 0x44, 0xd6, 0x65, 0x94, 0x19, 0x70, 0x21,
	0x4c, 0x84, 0x6e, 0x00, 0x06, 0xba, 0x10, 0x22, 0x67, 0x47, 0xd0, 0x4a, 0xf8, 0x14, 0x13, 0x0a,
	0xd3, 0x7f, 0x92, 0xdb, 0x8d, 0xc6, 0x03, 0x43, 0xb3, 0x13, 0xb0, 0x22, 0x99, 0xcd, 0xe2, 0x39,
	0xd5, 0x69, 0x9f, 0x0f, 0x2a, 0xc2, 0x2b, 0x22, 0x82, 0x52, 0xa0, 0x3b, 0x93, 0xe1, 0x5a, 0x85,
	0x32, 0x17, 0x98, 0x87, 0xb1, 0xa0, 0xb2, 0x1b, 0x81, 0xad, 0xc1, 0x9f, 0x35, 0x36, 0x11, 0xec,
	0x14, 0x58, 0xc2, 0x0b, 0x15, 0x0a, 0x5c, 0xca, 0x62, 0x3b, 0x07, 0x8b, 0x84, 0xae, 0x66, 0x7e,
	0x34, 0x84, 0xe9, 0xf5, 0x1b, 0xe8, 0xf0, 0x28, 0x92, 0xab, 0x4c, 0x15, 0x5e, 0xfb, 0xb0, 0xb1,
	0x3d, 0xfe, 0xc2, 0x80, 0xa6, 0x89, 0x5b, 0x09, 0xf3, 0xc1, 0xa2, 0xb3, 0x0b, 0xaf, 0x43, 0x62,
	0x20, 0x31, 0x1d, 0x1d, 0x94, 0x8c, 0xff, 0x57, 0x1d, 0x9c, 0x6a, 0xf6, 0xec, 0x04, 0x06, 0x29,
	0x5f, 0x60, 0x1e, 0xce, 0x10, 0xc3, 0x9c, 0x2b, 0x0c, 0xf1, 0x1d, 0xf5, 0xab, 0x19, 0xf4, 0x89,
	0xb8, 0x46, 0x0c, 0xb8, 0xc2, 0xf1, 0x3b, 0x2d, 0x55, 0xcf, 0xa4, 0x75, 0x23, 0x55, 0x4f, 0xa5,
	0x67, 0x70, 0xf0, 0x18, 0xab, 0x07, 0x91, 0xf3, 0xc7, 0x27, 0xea, 0x06, 0xa9, 0x07, 0x1b, 0xae,
	0xea, 0x60, 0x47, 0xbc, 0x78, 0x08, 0x95, 0x5c, 0x60, 0x56, 0x78, 0x2d, 0x2a, 0xa0, 0x4f, 0x05,
	0xdc, 0x6b, 0x68, 0x92, 0xcd, 0x64, 0x00, 0x5a, 0x42, 0x66, 0xc1, 0xbe, 0x03, 0xa7, 0x50, 0x32,
	0x5a, 0x6c, 0x3c, 0xac, 0xcf, 0x7a, 0xd8, 0xa4, 0x29, 0x5d, 0xbe, 0x87, 0x7d, 0x11, 0x17, 0x7c,
	0x9a, 0xa0, 0xd8, 0x78, 0xb5, 0x3f, 0xeb, 0xd5, 0xdf, 0xc8, 0x8c, 0xa3, 0xff, 0x7b, 0x0d, 0xba,
	0x5b, 0x96, 0x7d, 0x05, 0x1d, 0xf2, 0xd6, 0x23, 0x36, 0x8b, 0xd5, 0x26, 0x7b, 0x22, 0xd8, 0x37,
	0x00, 0x86, 0x8a, 0xa4, 0x40, 0x6a, 0x4d, 0x2f, 0xe8, 0x12, 0x72, 0x25, 0x05, 0xee, 0x68, 0x5a,
	0xca, 0x06, 0xf9, 0x1a, 0x9a, 0x76, 0xf2, 0x25, 0x38, 0x45, 0xc4, 0x13, 0x0c, 0x67, 0x3c, 0x52,
	0x32, 0xa7, 0x8d, 0x6b, 0x06, 0x36, 0x61, 0xd7, 0x04, 0xf9, 0x0a, 0x9c, 0xea, 0xf0, 0xf5, 0x9e,
	0xab, 0x9c, 0xeb, 0x7d, 0xab, 0xee, 0xb9, 0x81, 0x28, 0xe6, 0x1b, 0xe8, 0x4c, 0x79, 0xc2, 0xb3,
	0x08, 0x0b, 0xaf, 0x5e, 0x59, 0x21, 0x2a, 0xe7, 0xd2, 0x30, 0xc1, 0x56, 0xa2, 0x6f, 0x57, 0x26,
	0xb3, 0x08, 0x3d, 0xa0, 0x95, 0x34, 0x86, 0xcf, 0xc1, 0xa9, 0xea, 0xff, 0xaf, 0x03, 0x44, 0x29,
	0x9e, 0x84, 0x38, 0x2a, 0x57, 0xa3, 0x4d, 0xf6, 0x78, 0xc4, 0xbe, 0x86, 0x6e, 0x22, 0xa3, 0x05,
	0x0a, 0xcd, 0x99, 0x45, 0xe8, 0x18, 0x60, 0x3c, 0xf2, 0xff, 0xb6, 0xa0, 0x45, 0x9b, 0xaa, 0x23,
	0x6c, 0x6f, 0x50, 0x8d, 0xb2, 0x68, 0xcb, 0xf2, 0xf6, 0xfc, 0xa7, 0xda, 0xfa, 0xb3, 0x6a, 0x4f,
	0xc0, 0xe2, 0x91, 0xd2, 0xaf, 0x61, 0x83, 0xae, 0xf5, 0x60, 0x77, 0x03, 0x86, 0x17, 0x44, 0x04,
	0xa5, 0x40, 0xdf, 0xd6, 0xdd, 0xc2, 0xe9, 0xb3, 0x9a, 0x14, 0xcd, 0xde, 0xae, 0xd8, 0x44, 0xb0,
	0x57, 0xd0, 0xaf, 0xec, 0xd8, 0xe6, 0x4a, 0x77, 0x03, 0x67, 0xb7, 0x55, 0xa6, 0xe4, 0x65, 0x1e,
	0x47, 0xa8, 0xcb, 0xb2, 0x4c, 0xc9, 0x64, 0x8f, 0x47, 0xec, 0x08, 0xf6, 0x79, 0xaa, 0xa7, 0x15,
	0x6e, 0x9b, 0xd2, 0x26, 0x45, 0xcf, 0xc0, 0xf7, 0x65, 0x6b, 0x5e, 0x41, 0x3f, 0xca, 0x51, 0xdf,
	0x91, 0xcd, 0xab, 0xda, 0xa1, 0xca, 0x1d, 0x83, 0x96, 0xcf, 0xea, 0x11, 0xec, 0xe3, 0x7a, 0x19,
	0xe7, 0xa5, 0xaa, 0xc0, 0xc8, 0xeb, 0x92, 0xac, 0x67, 0x60, 0x2d, 0xbb, 0xc3, 0x88, 0xb9, 0xd0,
	0x88, 0x65, 0x44, 0x23, 0xec, 0x04, 0xfa, 0xe7, 0x6e, 0xac, 0x76, 0x65, 0xac, 0x5a, 0x57, 0xc4,
	0x73, 0xcf, 0x39, 0xac, 0x1d, 0x3b, 0x81, 0xfe, 0xa9, 0xf3, 0x28, 0xf3, 0x4d, 0x70, 0xa6, 0x74,
	0xba, 0x3d, 0x4a, 0xd7, 0x31, 0xe8, 0x0d, 0xce, 0xd4, 0x78, 0xa4, 0xbb, 0xac, 0xdf, 0xf5, 0x55,
	0xe1, 0xf5, 0x9f, 0x75, 0xf9, 0x8e, 0x88, 0xa0, 0x14, 0xe8, 0x80, 0xab, 0xa5, 0xa8, 0x16, 0xb6,
	0x6f, 0x0a, 0x33, 0x68, 0x59, 0xd8, 0x10, 0x5e, 0xf0, 0x28, 0x5a, 0xa5, 0xab, 0x84, 0x2b, 0x14,
	0xe1, 0x6c, 0x95, 0xd1, 0x8e, 0xb8, 0xe6, 0xb1, 0xa8, 0x50, 0xd7, 0xab, 0x4c, 0x8c, 0x47, 0xec,
	0x4b, 0x68, 0x4f, 0xa5, 0x5c, 0xe8, 0x81, 0x0c, 0x28, 0x9c, 0xa5, 0xcd, 0x89, 0xd0, 0x2b, 0xb6,
	0x2a, 0xf4, 0x03, 0x95, 0xcb, 0xd4, 0x63, 0x34, 0xab, 0x8e, 0x06, 0xae, 0x73, 0x99, 0xfa, 0x43,
	0xb0, 0xcc, 0x0e, 0xb0, 0x01, 0xf4, 0xde, 0x67, 0x8b, 0x4c, 0x3e, 0x66, 0x06, 0x70, 0xf7, 0x58,
	0x1b, 0x1a, 0x97, 0xab, 0x4f, 0x6e, 0x8d, 0x75, 0xa0, 0x79, 0x87, 0x49, 0xe2, 0xd6, 0xfd, 0x3f,
	0x6a, 0x60, 0x99, 0x72, 0x2a, 0x0e, 0x06, 0x70, 0xf7, 0x98, 0x03, 0x9d, 0xf7, 0xd9, 0x2c, 0x4e,
	0x12, 0x14, 0x6e, 0x9d, 0xbd, 0x80, 0xfd, 0x5f, 0x78, 0xae, 0x62, 0x9e, 0x24, 0x9f, 0xae, 0x0d,
	0xd8, 0xd0, 0x92, 0x00, 0x3f, 0x60, 0xa4, 0x50, 0xb8, 0x4d, 0x06, 0x60, 0x95, 0x4c, 0x8b, 0xf5,
	0xa0, 0x7b, 0xa5, 0x6f, 0x12, 0x99, 0x16, 0xfb, 0x02, 0xd8, 0xd6, 0x7b, 0x87, 0xb7, 0x99, 0x0d,
	0xed, 0x31, 0x4d, 0x56, 0xb8, 0x1d, 0x76, 0x00, 0xee, 0x56, 0xb4, 0x41, 0xbb, 0xaf, 0x4f, 0x36,
	0xdf, 0x3d, 0xfa, 0x6a, 0xe9, 0xc0, 0x3f, 0xc9, 0x0c, 0xc9, 0x70, 0xf7, 0x28, 0x80, 0x7a, 0xb8,
	0xe5, 0x71, 0xe6, 0xd6, 0x2e, 0x4f, 0x7f, 0x7b, 0x3d, 0x8f, 0xd5, 0x70, 0x1a, 0x4f, 0xe5, 0x7a,
	0x18, 0xc9, 0xf4, 0x4c, 0xe0, 0x5a, 0xc9, 0xe5, 0x99, 0xfe, 0xfc, 0xcb, 0x6c, 0x38, 0x8f, 0xd5,
	0x19, 0xfd, 0xd3, 0xd0, 0xf8, 0xf9, 0xd4, 0xa2, 0xdf, 0x6f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0x40, 0x99, 0xb7, 0x08, 0x8a, 0x08, 0x00, 0x00,
}
